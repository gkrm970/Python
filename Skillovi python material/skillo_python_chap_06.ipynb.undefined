{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Nested lists\n",
    "\n",
    "A great feature of of Python data structures is that they support nesting. This means we can have data structures within data structures. \n",
    "<br>**For example: A list inside a list, a tuple inside a list**.\n",
    "<br> \n",
    "The same thing done above using 3 lists can rather be presented in the form of nested lists.\n",
    "\n",
    "Let's see how this works!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[[32, 'John', 20],\n",
       " [22, 'Jane', 19],\n",
       " [21, 'Amita', 10],\n",
       " [44, 'Amit', 15],\n",
       " [77, 'Ram', 16]]"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Let's make three lists\n",
    "\n",
    "student_roll_nos = [32,22,21,44,77] \n",
    "student_names = [\"John\" ,\"Jane\", \"Amita\", \"Amit\", \"Ram\"] \n",
    "student_marks = [20,19,10,15,16]\n",
    "\n",
    "# Format is name, roll no., marks\n",
    "students = [[i,j,k] for (i,j,k) in zip(student_roll_nos,student_names, student_marks)]\n",
    "students"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In the above code, we used a new function call **zip()** to create a list containing each element of respective lists.\n",
    "\n",
    "For reference : https://docs.python.org/3.3/library/functions.html#zip"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Show \n",
    "\n",
    "students"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we can again use indexing to grab elements, but now there are two levels for the index. The items in the matrix object, and then the items inside batsman1,batsman2,batsman3 !\n",
    "At times, there can three, four and maybe even more levels of indexing depending on the levels of nesting. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Grab the details of the first student\n",
    "\n",
    "students[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Grab the name of the first student\n",
    "\n",
    "students[0][0]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This returns the first element of first element i.e list l1."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Grab the marks of Khushi\n",
    "\n",
    "students[1][2]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<font color=red>### INSTRUCTION TO DO</font>\n",
    "\n",
    "Using the same nested list given above.\n",
    "<br> Try accessing : \n",
    "    1. Marks of Amit\n",
    "    2. Roll no. of Ram\n",
    " Add new cells if required and practice"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "students.sort()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "students"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The students are sorted by their roll nos.\n",
    "<br> Note that the lists would be sorted by the first element of the list inside it."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## List Comprehension\n",
    "\n",
    "Python has an advanced feature for lists called **List Comprehensions**. \n",
    "<br> It allows for quick construction of lists. \n",
    "<br> It performs element-wise operation.  \n",
    "It allows single line code for complex operations on lists.\n",
    "\n",
    "Here are a few examples!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Show nested list created above\n",
    "\n",
    "Marks = [10, 20, 30, 40, 50, 60]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create a list with square of these elements\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Print the new list\n",
    "\n",
    "roll_nos"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create a list \n",
    "\n",
    "marks = [student[2] for student in students]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Show marks\n",
    "\n",
    "marks"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Calculate the percentage marks of each student considering that each student marks are out of 20."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# iterating through marks which is created above\n",
    "\n",
    "pct_marks = [(i/20)*100 for i in marks]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Show\n",
    "\n",
    "pct_marks"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<font color=red>### INSTRUCTION TO DO</font>\n",
    "\n",
    "Try the above task for retrieving the roll nos. from students_groupA\n",
    "<br> Add new cells if required and practice"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
