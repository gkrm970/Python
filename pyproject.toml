[tool.poetry]
name = "tests"
version = "0.1.0"
description = "Functional, integration, E2E test cases written in Robot Framework"
authors = ["Bence Petho <bence.petho@prodapt.com>"]


[tool.poetry.dependencies]
python = "^3.11"
# Classes without boilerplate
attrs = "^23.1.0"
# OAuth library for authentication
oauthlib = "^3.2.2"
# Task runner that works well with poetry
poethepoet = "^0.22.0"
# Settings management using Pydantic
pydantic-settings = "^2.0.3"
# HTTP library for API calls
requests = "^2.31.0"
# OAuth library support for Requests
requests-oauthlib = "^1.3.1"
# The main Robot Framework testing library
robotframework = "^7.0.0"
# Robot Framework wrapper for Requests
robotframework-requests = "^0.9.5"
# robot framework- selenium library for web automation
robotframework-seleniumlibrary = "^6.2.0"
# selenium library used for web automation
selenium = "^4.17.2"
# prettytable used
prettytable = "^3.9.0"


[tool.poetry.group.dev.dependencies]
# Auto-formatter
black = { extras = ["d"], version = "^23.7.0" }
# Sorting library imports
isort = "^5.12.0"
# Static type checker
mypy = "^1.5.0"
# Auto-formatter for Robot Framework
robotframework-tidy = "^4.4.0"
# Static analyser for Robot Framework
robotframework-robocop = "^4.0.1"
# Linter
ruff = "^0.0.284"

# Library stubs for oauthlib
types-oauthlib = "^3.2.0.9"
# Library stubs for requests
types-requests = "^2.31.0.2"


[[tool.poetry.source]]
name = "PyPI"
priority = "primary"


#[[tool.poetry.source]]
## Private TINAA package registry hosted in GitLab
#name = 'tinaa'
#url = 'https://gitlab.tinaa.teluslabs.net/api/v4/projects/1029/packages/pypi/simple'
#priority = "supplemental"
#

[tool.poe.tasks]
run-sanity = "robot --pythonpath . --outputdir logs --loglevel INFO suites/sanity"
format-robot = "robotidy --config pyproject.toml ."
format-python = "black ."


[tool.black]
line-length = 88
target-version = ['py311']


[tool.isort]
profile = "black"
include_trailing_comma = true
force_grid_wrap = 0
line_length = 88


[tool.mypy]
# Disallows defining functions without type annotations or with incomplete type annotations
disallow_untyped_defs = true
# Shows column numbers in error messages
show_column_numbers = true
# Prefixes each error with the relevant context
show_error_context = true
# Warns about casting an expression to its inferred type
warn_redundant_casts = true
# Warns about unneeded # type: ignore comments
warn_unused_ignores = true

# See https://mypy.readthedocs.io/en/stable/config_file.html for more information


[[tool.mypy.overrides]]
# Ignore missing imports from the following modules
ignore_missing_imports = true
module = [
    "requests_oauthlib.*",
]


[tool.robotidy]
# Output diff of each processed file
diff = true
# Write changes back to file
overwrite = true
# Max allowed characters per line
line-length = 88
# Use Unix line endings (LF)
lineseparator = "unix"
# Configure transformers
configure = [
    "IndentNestedKeywords: enabled = true",
    "RenameKeywords: enabled = true",
    "RenameTestCases: enabled = true: capitalize_each_word = true",
    "RenameVariables: enabled = true",
    "SmartSortKeywords: enabled = true",
]


[tool.ruff]
# Enable pydocstyle (`D`), pycodestyle (`E`), Pyflakes (`F`),
# isort (`I`), pep8-naming (`N`) and Pylint (`PL`) codes by default
select = ["D", "E", "F", "I", "N", "PL"]
ignore = []
# Same as Black
line-length = 88
# Allow unused variables when underscore-prefixed
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"
# Assume Python 3.11
target-version = "py311"


[build-system]
requires = ["poetry>=1.5.1"]
build-backend = "poetry.masonry.api"
