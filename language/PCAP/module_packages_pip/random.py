"""
What is a module in Python?

The total of Python's built-in functions

An abstract function which can be used in many cases

A file that groups related code for specific operations-->correct

External Python code that we have to install ourselves

Answer: A file that group related code for specific operations


What is a namespace in Python?


A. The variables contained within a module

B. The names of a module's files

C. The names of a module's entities

D. Names contained in our code and modules --> correct

Answer: Names contained in our code and modules.


What methods does Python offer to work with modules?


the import module


the import function


the import variable


the import keyword

Answer: the import module
so that we can use function/methods/variables/keywords etc from the module


Which of the following statements are correct?

import math

from math import pi, sin

import math as m

All options are correct

Answer: All options are correct



from math import * -->also correct but not reccomendated
Some useful math functions are the following:


       ceil(x) => rounds the number x up to the nearest integer


       floor(x) => rounds the number x down to the nearest integer


       trunc(x) => the value of x truncated to an integer


       pow(x, y, z) => returns the value of (x ** y) % z. z is optional


       hypot(x1, x2, x3, ..,xn) => calculates the Euclidean form. For n-dimensional cases, the coordinates passed are assumed to be like (x1, x2, x3, …, xn). It is calculated by sqrt(x1*x1 + x2*x2 +x3*x3 …. xn*xn).


       factorial(x) => returns the factorial of a number, it only accepts positive integers. The factorial of a number is the sum of the multiplication, of all the whole numbers, from our specified number down to 1. E.x the factorial of 4 would be 4 x 3 x 2 x 1 = 24


Which of the following expressions return False?

A.print(math.hypot(9,12) == math.sqrt(225))

B.print(math.trunc(7.3) == math.floor(7.4))

C.print(math.floor(10.8) > math.ceil(10.8))

Answer: C

Which of the following answers is correct for the statement:

import math
math.ceil(math.pi)

3.0

4.0

4

3

Answer: 4

def is_triangle(a, b, c):
    if math.pow(a, 2) + math.pow(b,2) == math.pow(c,2):
        return True
    return False

print("The program checks if three sides form a right-angled triangle.")
inp1 = input("Enter first side value: ")
inp2 = input("Enter second side value: ")
inp3 = input("Enter third side value: ")
print("Is triangle?", is_triangle(inp1, inp2, inp3))

# Do any necessary imports here

# Complete the function
def circle_area(r):


inp = float(input("Enter the radius of a circle:"))
print("Area of circle =", circle_area(inp))

Answer:
def circle_area(r):
    return 3.14 * r * r


inp = float(input("Enter the radius of a circle:"))
print("Area of circle =", circle_area(inp))


What are pseudo-random numbers?

Numbers generated by algorithms that we cannot predict their sequence
Both of the above
Numbers coming from physical processes, which are not predictable

Answer: Both of the above


What does the random module do?

Generates actual random numbers

Generates either actual or pseudo numbers, based on the parameters

Generates pseudo-random numbers

All of the above

Answer: Generates pseudo-random numbers

Important note
The random module generates pseudo-random numbers, not truly random numbers. These numbers are unpredictable enough for most applications but follow a deterministic algorithm.
For cryptographic purposes or situations requiring true randomness, consider external libraries or hardware random number generators


The module provides several functions, including:

- random(): returns a random float between 0 and 1.
- randint(a, b): returns a random integer between a and b (inclusive).
- randrange(start, stop[, step]): returns a randomly selected element from the range(start, stop, step).
- choice(seq): returns a random element from the given sequence.
- shuffle(seq): shuffles the elements in the given sequence randomly.

The random module is useful in a wide range of applications, including games, simulations, and cryptography.

What is the difference between the randrange and randint methods?

A. randrange() returns a float while randint() returns an integer


B. randrange() requires two parameters


C. randint() may return a value equal to the left and right parameter


D. randrange() may take a step parameter

Answer: C
    randint not allow a step parameter
    randint allow and return a value equal to the left and right parameter
    randrange allow a step parameter as optional

What is the output of the following print statements?


>>> import random
>>> random.seed(12)
>>> print(random.random())
>>> random.seed(12)
>>> print(random.random())

What is the output of the following code?


>>> from random import randint
>>> print(str(randint(0, 1)) + str(randint(0, 1)), end='')

01 or 10
TypeError
0
10, 00, 01 or 11

Answer: TypreError



What is the output of the following code?

>>> from random import randrange
>>> randrange(0, 1))

Either 0 or 1
ValueError
Only 0
Only 1

Answer: only 0


What is the output of the following code?

>>> from random import randrange
>>> randrange(0, 20, 5)

it would return one of the numbers in [0, 5, 10, 15, 20]
it would return one of the numbers in [0, 5, 10, 15]
it would return one of the numbers in [5, 10, 15]
it would return one of the numbers in [5, 10, 15, 20]

Answer: it would return one of the numbers in [0, 5, 10, 15]


What is the output of the following code snippet?

>>> from random import choice
>>> name = 'Yoon'
>>> print(choice(name))

One of the name characters but the first
Error
one of the name characters,
one of the name characters, but the last

Answer: one of the name characters

What is the output of the following code snippet?
>>> from random import sample
>>> teachers = ('Pak', 'Kim', 'Yoon')
>>> print(sample(teachers))

TypeError: sample() requires a list argument
two of the names in the tuple
one of the names in the tuple
TypeError: sample() missing 1 required positional argument:

Answer: TypeError sample missing 1 required positional argument


Open the file cards.py, and write a function that takes as arguments a list of suits and a list of ranks. Inside the function create the list of the deck and return a random group of 4 cards.

The output should be in the format of <rank>-<suit>, e.g Jack-Hearts


# Add imports here


# Complete the function
def cards_sample(suits, ranks):


suits = ["Spades", "Hearts", "Clubs", "Diamonds"]
ranks = [i for i in range(1, 11)] + ['Jack', 'Queen', 'King']

print(cards_sample(suits, ranks))

Answer:
def card_sample(suits: list, ranks: list):
    return f"{random.choice(suits)}-{random.choice(ranks)}"


suits = ["Spades", "Hearts", "Clubs", "Diamonds", "Joker"]
ranks = [a for a in range(6)]

sample = card_sample(suits, ranks)
print(sample)


What methods does Python provide for printing all entities specific to a module?

The list module
The doc module
The dir module

Answer: The dir module


What date type will get printed where dir module is used?
answer: list of strings containing the names defined by the module and the names of the attributes of the module itself (as string)
print(dir(math))
['__doc__', '__loader__', '__name__', '__package__', '__spec__', 'acos', 'acosh', 'asin', 'asinh', 'atan', 'atan2', 'atanh', 'cbrt', 'ceil', 'comb', 'copysign', 'cos', 'cosh', 'degrees', 'dist', 'e', 'erf', 'erfc', 'exp', 'exp2', 'expm1', 'fabs', 'factorial', 'floor', 'fmod', 'frexp', 'fsum', 'gamma', 'gcd', 'hypot', 'inf', 'isclose', 'isfinite', 'isinf', 'isnan', 'isqrt', 'lcm', 'ldexp', 'lgamma', 'log', 'log10', 'log1p', 'log2', 'modf', 'nan', 'nextafter', 'perm', 'pi', 'pow', 'prod', 'radians', 'remainder', 'sin', 'sinh', 'sqrt', 'tan', 'tanh', 'tau', 'trunc', 'ulp']


when we use the dir() without passing an argument, then
answer: it returns the names in the current scope (global scope if called outside a function), and the names of the attributes of the module itself (as string)

What will the following code return if executed?


"""